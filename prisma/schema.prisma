// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id                  Int       @id @default(autoincrement())
  nome                String    @unique
  setor               String?
  localizacao         String?
  numeroFuncionarios  Int?      @map("numero_funcionarios")
  website             String?
  fonteInformacao     String?   @map("fonte_informacao")
  dataCriacao         DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao     DateTime  @updatedAt @map("data_atualizacao")
  contatos            Contato[]
}

model Contato {
  id                Int       @id @default(autoincrement())
  empresaId         Int       @map("empresa_id")
  empresa           Empresa   @relation(fields: [empresaId], references: [id])
  nome              String
  cargo             String?
  departamento      String?
  email             String    @unique
  statusEmail       String?   @map("status_email") // verificado, invalido, arriscado, etc.
  telefone          String?
  fonteContato      String?   @map("fonte_contato")
  dataCriacao       DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao   DateTime  @updatedAt @map("data_atualizacao")
  listasDeEmail     ListaEmail[] @relation("ContatoEmLista")
  enviosCampanha    EnvioCampanha[]
}

model ListaEmail {
  id              Int       @id @default(autoincrement())
  nome            String    @unique
  descricao       String?
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  contatos        Contato[] @relation("ContatoEmLista")
  campanhas       CampanhaEmail[]
}

model TemplateEmail {
  id              Int       @id @default(autoincrement())
  nome            String    @unique
  assuntoPadrao   String?   @map("assunto_padrao")
  corpoHtml       String    @db.Text // Usar Text para HTML longo
  corpoTexto      String?   @db.Text // Para fallback
  tipo            String?   // Ex: promocional, informativo
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  campanhas       CampanhaEmail[]
}

model CampanhaEmail {
  id                Int       @id @default(autoincrement())
  nome              String
  assunto           String
  remetenteNome     String?   @map("remetente_nome")
  remetenteEmail    String    @map("remetente_email")
  dataAgendamento   DateTime? @map("data_agendamento")
  dataEnvio         DateTime? @map("data_envio")
  status            String    // Ex: rascunho, agendada, enviando, enviada, falhou
  listaEmailId      Int       @map("lista_email_id")
  listaEmail        ListaEmail @relation(fields: [listaEmailId], references: [id])
  templateEmailId   Int       @map("template_email_id")
  templateEmail     TemplateEmail @relation(fields: [templateEmailId], references: [id])
  dataCriacao       DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao   DateTime  @updatedAt @map("data_atualizacao")
  envios            EnvioCampanha[]
  totalEnviados     Int?      @default(0) @map("total_enviados")
  totalAberturas    Int?      @default(0) @map("total_aberturas")
  totalCliques      Int?      @default(0) @map("total_cliques")
  totalRejeicoes    Int?      @default(0) @map("total_rejeicoes")
}

model EnvioCampanha {
  id              Int       @id @default(autoincrement())
  campanhaEmailId Int       @map("campanha_email_id")
  campanhaEmail   CampanhaEmail @relation(fields: [campanhaEmailId], references: [id])
  contatoId       Int       @map("contato_id")
  contato         Contato   @relation(fields: [contatoId], references: [id])
  dataEnvio       DateTime  @default(now()) @map("data_envio")
  statusEnvio     String    // Ex: enviado, falhou, aberto, clicado, rejeitado
  dataAbertura    DateTime? @map("data_abertura")
  dataClique      DateTime? @map("data_clique")
  mensagemErro    String?   @map("mensagem_erro")

  @@unique([campanhaEmailId, contatoId])
}

enum TipoRedeSocial {
  X
  FACEBOOK
}

model ContaRedeSocial {
  id                  Int       @id @default(autoincrement())
  tipo                TipoRedeSocial
  idUsuarioPlataforma String    @map("id_usuario_plataforma")
  nomeUsuario         String    @map("nome_usuario")
  accessToken         String    @db.Text @map("access_token")
  refreshToken        String?   @db.Text @map("refresh_token")
  expiresAt           DateTime? @map("expires_at")
  dataConexao         DateTime  @default(now()) @map("data_conexao")
  dataAtualizacao     DateTime  @updatedAt @map("data_atualizacao")
  postagens           PostagemRedeSocial[]

  @@unique([tipo, idUsuarioPlataforma])
}

model PostagemRedeSocial {
  id                    Int       @id @default(autoincrement())
  contaRedeSocialId     Int       @map("conta_rede_social_id")
  contaRedeSocial       ContaRedeSocial @relation(fields: [contaRedeSocialId], references: [id])
  textoConteudo         String    @db.Text @map("texto_conteudo")
  midiaUrl              String?   @map("midia_url")
  linkExterno           String?   @map("link_externo")
  status                String    // Ex: rascunho, agendada, publicada, falhou
  dataAgendamento       DateTime? @map("data_agendamento")
  dataPublicacao        DateTime? @map("data_publicacao")
  idPostagemPlataforma  String?   @map("id_postagem_plataforma")
  metricas              Json?     
  mensagemErro          String?   @map("mensagem_erro")
  dataCriacao           DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao       DateTime  @updatedAt @map("data_atualizacao")
}

enum TipoMediaAsset {
  IMAGEM
  VIDEO_CURTO
  AUDIO
  LOGO
}

model MediaAsset {
  id              Int       @id @default(autoincrement())
  nome            String
  tipo            TipoMediaAsset
  urlArmazenamento String   @map("url_armazenamento") // URL no S3, GCS ou local
  formato         String?   // ex: jpg, png, mp4, mp3
  tamanhoBytes    Int?      @map("tamanho_bytes")
  dataUpload      DateTime  @default(now()) @map("data_upload")
  videoTemplates  VideoTemplate[] @relation("AssetEmTemplate")
  videosGerados   VideoGerado[] @relation("AssetEmVideo") // Se um asset for usado diretamente em um vídeo gerado
}

model VideoTemplate {
  id              Int       @id @default(autoincrement())
  nome            String    @unique
  descricao       String?
  duracaoSegundos Int?      @map("duracao_segundos")
  formato         String?   // ex: 16:9, 9:16 (para shorts), 1:1
  previewUrl      String?   @map("preview_url")
  // Estrutura do template (ex: JSON descrevendo placeholders para texto, imagem, vídeo)
  estruturaJson   Json?     @map("estrutura_json") 
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  videosGerados   VideoGerado[]
  assets          MediaAsset[] @relation("AssetEmTemplate") // Assets padrão do template
}

enum StatusVideoGerado {
  PENDENTE
  PROCESSANDO
  CONCLUIDO
  FALHOU
}

model VideoGerado {
  id                Int       @id @default(autoincrement())
  videoTemplateId   Int       @map("video_template_id")
  videoTemplate     VideoTemplate @relation(fields: [videoTemplateId], references: [id])
  nomePersonalizado String?   @map("nome_personalizado")
  // Dados de personalização usados para gerar este vídeo (ex: JSON com textos, IDs de MediaAsset)
  dadosPersonalizacao Json?    @map("dados_personalizacao")
  status            StatusVideoGerado @default(PENDENTE)
  urlVideoFinal     String?   @map("url_video_final") // URL do vídeo renderizado
  logProcessamento  String?   @db.Text @map("log_processamento")
  dataCriacao       DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao   DateTime  @updatedAt @map("data_atualizacao")
  assetsUsados      MediaAsset[] @relation("AssetEmVideo") // Assets específicos usados neste vídeo
}

